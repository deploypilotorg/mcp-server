name: Check Requirements

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  check-requirements:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git diff
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Get changed Python files
        id: changed-files
        run: |
          # Get list of changed Python files
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            git fetch origin $GITHUB_BASE_REF
            git diff --name-only origin/$GITHUB_BASE_REF...HEAD -- '*.py' > changed_files.txt
          else
            git diff --name-only HEAD~1 HEAD -- '*.py' > changed_files.txt
          fi
          echo "CHANGED_FILES=$(cat changed_files.txt)" >> $GITHUB_ENV
          
      - name: Check for new imports
        id: check-imports
        run: |
          # Create a temporary virtual environment
          python -m venv /tmp/venv
          source /tmp/venv/bin/activate
          
          # Install only the packages from requirements.txt
          pip install -r requirements.txt
          
          # Get the list of installed packages
          pip freeze > before_install.txt
          
          # Install the changed files to get their dependencies
          if [ -s changed_files.txt ]; then
            pip install -e .
          fi
          
          # Get the new list of installed packages
          pip freeze > after_install.txt
          
          # Find new packages that were installed
          comm -13 <(sort before_install.txt) <(sort after_install.txt) > new_packages.txt
          
          # Compare with requirements.txt
          grep -v '^#' requirements.txt | cut -d'=' -f1 | sort > requirements_packages.txt
          grep -v '^#' new_packages.txt | cut -d'=' -f1 | sort > new_packages_clean.txt
          
          # Find packages that are new but not in requirements.txt
          comm -23 new_packages_clean.txt requirements_packages.txt > missing_packages.txt
          
          if [ -s missing_packages.txt ]; then
            echo "The following packages were added but not listed in requirements.txt:"
            cat missing_packages.txt
            echo "Please update requirements.txt with the missing packages."
            exit 1
          fi 