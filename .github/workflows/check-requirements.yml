name: Check Requirements

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  check-requirements:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for git diff
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint
          
      - name: Get changed Python files
        id: changed-files
        run: |
          # Get list of changed Python files
          if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
            git fetch origin $GITHUB_BASE_REF
            git diff --name-only origin/$GITHUB_BASE_REF...HEAD -- '*.py' > changed_files.txt
          else
            git diff --name-only HEAD~1 HEAD -- '*.py' > changed_files.txt
          fi
          
          # Read the file and set environment variable properly
          if [ -f changed_files.txt ]; then
            CHANGED_FILES=$(cat changed_files.txt | tr '\n' ' ')
            echo "CHANGED_FILES=${CHANGED_FILES}" >> $GITHUB_ENV
          else
            echo "CHANGED_FILES=" >> $GITHUB_ENV
          fi
          
      - name: Check imports
        run: |
          # Create a temporary virtual environment
          python -m venv /tmp/venv
          source /tmp/venv/bin/activate
          
          # Install only the packages from requirements.txt
          pip install -r requirements.txt
          
          # Create a Python script to analyze imports
          cat > analyze_imports.py << 'EOF'
          import ast
          import sys
          import os
          from typing import Set
          import sysconfig
          
          def is_stdlib_module(module_name: str) -> bool:
              """Check if a module is part of Python's standard library."""
              try:
                  # Get the standard library path
                  stdlib_path = sysconfig.get_path('stdlib')
                  # Try to find the module in the standard library
                  module_path = sysconfig.get_path('purelib', vars={'base': stdlib_path})
                  return os.path.exists(os.path.join(module_path, module_name))
              except:
                  return False
          
          def is_local_module(module_name: str) -> bool:
              """Check if a module is part of the local project."""
              # Add any local module names that should be excluded
              local_modules = {'mcp_client', 'handlers', 'utils'}
              return module_name in local_modules
          
          def get_imports(file_path: str) -> Set[str]:
              with open(file_path, 'r') as f:
                  tree = ast.parse(f.read())
              
              imports = set()
              for node in ast.walk(tree):
                  if isinstance(node, ast.Import):
                      for name in node.names:
                          module_name = name.name.split('.')[0]
                          if not is_stdlib_module(module_name) and not is_local_module(module_name):
                              imports.add(module_name)
                  elif isinstance(node, ast.ImportFrom):
                      if node.module:
                          module_name = node.module.split('.')[0]
                          if not is_stdlib_module(module_name) and not is_local_module(module_name):
                              imports.add(module_name)
              
              return imports
          
          def get_installed_packages() -> Set[str]:
              import pkg_resources
              return {pkg.key for pkg in pkg_resources.working_set}
          
          def main():
              if not os.path.exists('changed_files.txt'):
                  return
                  
              with open('changed_files.txt', 'r') as f:
                  changed_files = [line.strip() for line in f if line.strip()]
              
              if not changed_files:
                  return
              
              all_imports = set()
              for file in changed_files:
                  if os.path.exists(file):
                      all_imports.update(get_imports(file))
              
              installed_packages = get_installed_packages()
              missing_packages = all_imports - installed_packages
              
              if missing_packages:
                  print("The following packages are imported but not installed:")
                  for pkg in sorted(missing_packages):
                      print(f"- {pkg}")
                  sys.exit(1)
          
          if __name__ == '__main__':
              main()
          EOF
          
          # Run the analysis
          python analyze_imports.py 